from fastapi import FastAPI
from pessoa_lib.database import init_db
from controller.pessoa import router as pessoas_router
from controller.endereco import endereco_router as enderecos_router

description = """
## üìñ Vis√£o Geral do Projeto
Esta API foi desenvolvida como uma solu√ß√£o acad√™mica para o cadastro de **Pessoas** e seus m√∫ltiplos **Endere√ßos**. O projeto demonstra a aplica√ß√£o de uma arquitetura robusta e desacoplada, utilizando Python e o framework FastAPI.

---

### üèõÔ∏è Arquitetura e Padr√µes

A aplica√ß√£o segue uma estrutura inspirada no padr√£o **MVC (Model-View-Controller)**, adaptada para o contexto de APIs:

* **Model (`/model`)**: Utiliza `SQLModel` para definir a estrutura dos dados e o mapeamento objeto-relacional (ORM) com o banco de dados. √â a camada que representa a nossa base de dados em c√≥digo Python.

* **Controller (`/controller`)**: Implementado com os `APIRouter` do FastAPI. Esta camada √© respons√°vel por expor os *endpoints*, receber as requisi√ß√µes HTTP e retornar as respostas ao cliente.

* **Service & Repository (`/service`, `/repository`)**: Para um maior desacoplamento, a l√≥gica de neg√≥cio (`Service`) foi separada da l√≥gica de acesso a dados (`Repository`). Isso torna o c√≥digo mais limpo, test√°vel e f√°cil de manter.

### ‚ú® Uso de Generics

Um dos pilares deste projeto √© a reutiliza√ß√£o de c√≥digo atrav√©s de **Generics** do Python (`TypeVar`). As classes `Repository`, `Service` e a f√°brica de rotas `create_crud_router` s√£o gen√©ricas, o que significa que podem operar com qualquer modelo (`Pessoa` ou `Endereco`) sem a necessidade de reescrever c√≥digo repetitivo para cada entidade.

---

### üíæ Banco de Dados

Conforme os requisitos, a API utiliza um banco de dados **SQLite**. Ele √© configurado para rodar em mem√≥ria (ou em um arquivo `app.db`), garantindo que a aplica√ß√£o seja leve, aut√¥noma e f√°cil de executar em qualquer ambiente, sem a necessidade de um servidor de banco de dados externo.

---

### üöÄ Funcionalidades

* ‚úÖ **Pessoas**: CRUD completo para o cadastro de usu√°rios.
* ‚úÖ **Endere√ßos**: CRUD completo para os endere√ßos, sempre vinculados a uma pessoa.
* ‚úÖ **Documenta√ß√£o Autom√°tica**: Interface interativa em `/docs` e `/redoc`.

"""

app = FastAPI(
    title="API Acad√™mica de Pessoas e Endere√ßos",
    description=description,
    version="1.1.0",
    contact={
        "name": "Gustavo Saraiva",
        "url": "https://github.com/saraivagustavo",
        "email": "gsaraivam10@gmail.com",
    }
)

init_db()

app.include_router(pessoas_router)
app.include_router(enderecos_router)

@app.get('/')
def health():
    return{"status":"ok"}
#uvicorn main:app --reload #comando para rodar o servidor localmente
#teste do codewise
#segundo teste do codewise, commit e push